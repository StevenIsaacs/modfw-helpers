#!/usr/bin/env bash
#+
# Use this script to create a bootable USB flash drive using an existing
# image file.
#-
ScriptPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $ScriptPath/modfw-functions.sh

usage () {
    cat << EOF
Usage: $id [options]
  This script installs a bootable USB image onto a target drive so that it
  can be booted on the target.

  In most cases this is a USB flashdrive and Linux.

  WARNING: This is a potentially destructive script which will destroy existing
  content on the target device. To help avoid unintended destruction of data
  this script first verifies that the target device is a removable device.

  Options:
    -i|--os-image <file>
        Path to the image file to install on the target device.
        [os-image=`cat $SettingsDir/OsImage`]
    -t|--device <device>
        The device on which to install the bootable images. This is typically
        sdX where X indicates a removable storage device in the /dev directory.
        If this is equal to "default" then this script will scan for removable
        storage devices and use the highest ordered one. e.g. sdd will be used
        before sdc.
        [device=`cat $SettingsDir/Device`]
    --show-devices
        Display a list of USB disk drives which can be used by $id.
    --reset-settings
        Reset the option settings to the defaults.
    -h|--help
        Display this help.
EOF
}

#+
# Handle the command line options.
#-
o=`getopt -l "\
device:,\
os-image:,\
show-devices,\
reset-settings,\
verbose,\
help" \
   -o "t:i:h" -- "$@"`

if [ $? -gt 0 ]; then
    usage
    exit 1
fi

eval set -- $o

while [ $# -ge 1 ]; do
    case "$1" in
      --)
        shift
        break
        ;;
      -t|--device)
        Device=$2
        shift
        ;;
      -i|--os-image)
        OsImage=$2
        shift
        ;;
      --show-devices)
        ShowDevices=y
        ;;
      --reset-settings)
        ResetSettings=y
        ;;
      --verbose)
        Verbose=y
        ;;
      -h|--help)
        usage
        exit 0
        ;;
      # using getopt should avoid needing this catchall but just in case...
      *)
        error "Invalid option: $1"
        usage
        exit 1
        ;;
    esac
    shift
done

Defaults=(
  Device="default"
  OsImage=""
)

if [[ $# -ne 0 ]]; then
  usage
  exit 1
fi

for s in "${Defaults[@]}"
do
  if [ -n "$ResetSettings"]; then
    clear_setting $s
  fi
  init_setting $s
done

is_usb_storage () {
  local _retval=$1
  if [ -e "/sys/block/$1/removable" ]; then
    r=`cat /sys/block/$1/removable`
    if [ "$r" = "1" ]; then
      i=`udevadm info /dev/$1 | grep ID_USB_DRIVER | cut -d = -f 2`
      if [ "$i" = "usb-storage" ]; then
        grep $1 /proc/partitions
        return $?
      fi
    fi
  fi
  return 1
}

#+
# Scan for a USB storage device starting with the highest and working down.
#-
find_usb_storage_device () {
  local _retval=$1
  for d in sdj sdi sdh sdg sdf sde sdd sdc; do
    if [ -e "/dev/$d" ]; then
      message "Checking /dev/$d"
      if is_usb_storage $d; then
        message "Device $d is a USB storage device."
        if [ -z "$ShowDevices" ]; then
          eval $_retval=$d
          return
        fi
      fi
    fi
  done
  if [ -z "$ShowDevices" ]; then
    die "No USB storage devices found."
  fi
}

#+
# Test to see if the target device is mounted.
#-
is_mounted () {
    mount | grep $1
    return $?
}

if [ -n "$ShowDevices" ]; then
  find_usb_storage_device dev
  exit 0
fi

message "USB image file is: $OsImage"

#+
# Validate the target device.
#-
if [ "$Device" = "default" ]; then
  find_usb_storage_device Device
fi
if ! is_usb_storage $Device; then
  die "The target device $Device is not a USB storage device."
fi

if [ -z "$OsImage" ]; then
  die "The image file has not been specified."
fi

if [ ! -e $OsImage ]; then
  die "The image file does not exist: $OsImage"
fi

#+
# If the device is mounted then don't use it. As a precaution force the user
# to manually unmount it.
#-
if is_mounted /dev/$Device; then
  die "The target device $Device is mounted."
fi

warning "This is destructive. Install onto /dev/$Device?"
select yn in "Yes" "No"; do
  case $yn in
    Yes )
      message "Installing to /dev/$Device"
      run dd if=$OsImage | pv | sudo dd of=/dev/$Device bs=1M
      message "Syncing $Device"
      sync
      break;;
    No )
      message "Exiting"
      exit 1;;
  esac
done

exit 0
